	The following files have code which program a rudimentary form of the game Hivolts. Work was shared with partner Max Saparov, and approximately equal collaboration was expected of the partnership. Hivolts is a single player game in which one works on a 12x12 board to avoid several “Mho’s,” which are moving towards you. However, electric fences scattered throughout the board lie in the way of the Mhos and will kill anything that lands on them. The objective is to survive by moving around and forcing the Mhos to move onto deadly electric fences.	Our code fulfills the specifications for the most part: it is a playable, turn-based game, with Mhos that move in a specific order, and which ends once the player is dead or all the Mhos are dead. However, it does miss some of the requirements: it is in an JFrame rather than a JApplet (neither of us went out of our way to change it), there are still bugs in Mho movement, and there is minimal user feedback.	There is still error in the Mho movement, which would be our most major concern moving on with the project. Fences often disappear after Mhos move onto them, so new Mhos can move onto the spot where old Mhos died, and stay alive. Additionally, sometime Mhos can move after dying on a fence, which we were unable to fix immediately. Other than that, there aren’t any errors, but many extra features could be added to this very rough version of the game.	The code consists of 5 classes: Player, Mho, Fence, Board, and Game. The first three are object classes for the different objects that appear on the board, and have information about each object’s position on the board, dead/alive status, and image information. The Player has extra code which lets the user known when he has died. Mho has extra code detailing the movement mechanism/preference for each turn. Fence is rudimentary and only has information about the fence’s position (which actually isn’t used), as well as its Image. All three are used in Board, which initializes the objects and draws the board. This is then used in Game, which creates its own Board and Player. The user input and the bulk of the game mechanics are in Game, which also contains the main method. 	The base of the game is a 12 by 12 array of digits which is used to determine the actual game mechanics (the board is then printed based on the array). Max built this array and completed the randomization before we partnered up, so this was our starting spot. I then created the framework of the Player, Mho, and Fence, and coded up the Mho movement preferences in the Mho class. While I was doing that, Max worked on the KeyListeners and created the Game class. Once we were done with this, Max connected the movement mechanisms of each object, while I worked on creating the graphics for the Board as well as implementing images for different states of each object. 	One of the biggest problems that came up was making the actual JFrame show up. The way we organized Game and Board was a little awkward: since Game used Board, Game was the enveloping class that should be initialized in the main method. However, for the JFrame, Board should be added, because it contains the information for the graphics painted onto the frame. Initially, we didn’t realize this, and went several days unable to graphically represent the game as we tried to add Game to the JFrame. Once we figured this out, coding for the images and the confirming the game mechanics became much, much easier, and we progressed along smoothly. This roadblock was unexpected, and so other than this, we followed our plan of attack rather to-the-point.	Acknowledgements go to Max Saparov, my partner. Additionally, I used code from my previous Conway’s Game of Life code as a base for the graphics and as a refresher for my memory.